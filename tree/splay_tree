#include <iostream>
#include <string>
#include <algorithm>
#include <memory>
#include <vector>
#define endl "\n"
typedef long long ll;
typedef unsigned int uint;
#define pii pair<int, int>
using namespace std;

int n, m, num, x, y;
string s;
int arr[100'001];
vector<int> v;

struct Node {
	int key;
	int cnt;
	bool flip;
	Node* parent;
	Node* left;
	Node* right;

	Node(int k, Node* node) : key(k), cnt(1), flip(0), parent(node), left(nullptr), right(nullptr) {}
	Node(int k) : Node(k, nullptr) {}
	Node() : Node(-1, nullptr) {}
	~Node() { if (left) delete left; if (right) delete right; }
};

class SplayTree {
private:
	void left_rotate(Node* x) {
		Node* y = x->right;
		x->right = y->left;
		if (y->left) {
			y->left->parent = x;
		}
		y->parent = x->parent;
		if (!x->parent) {
			root = y;
		}
		else if (x == x->parent->left) {
			x->parent->left = y;
		}
		else {
			x->parent->right = y;
		}
		y->left = x;
		x->parent = y;

		update(x);
		update(y);
	}

	void right_rotate(Node* x) {
		Node* y = x->left;
		x->left = y->right;
		if (y->right) {
			y->right->parent = x;
		}
		y->parent = x->parent;
		if (!x->parent) {
			root = y;
		}
		else if (x == x->parent->left) {
			x->parent->left = y;
		}
		else {
			x->parent->right = y;
		}
		y->right = x;
		x->parent = y;

		update(x);
		update(y);
	}

	void splay(Node* x, Node* y = nullptr) { // x->y splay
		if (!x) return;
		while (x->parent != y) {
			Node* p = x->parent;
			Node* g = p->parent;

			push(g); push(p); push(x);

			if (!g || g == y) { // Zig
				if (x == p->left) {
					right_rotate(p);
				}
				else {
					left_rotate(p);
				}
			}
			else {
				if (x == p->left && p == g->left) { // Zig-Zig
					right_rotate(g);
					right_rotate(p);
				}
				else if (x == p->right && p == g->right) { // Zig-Zig
					left_rotate(g);
					left_rotate(p);
				}
				else if (x == p->left && p == g->right) { // Zig-Zag
					right_rotate(p);
					left_rotate(g);
				}
				else { // Zig-Zag
					left_rotate(p);
					right_rotate(g);
				}
			}
		}
	}

	void push(Node* x) {
		if (!x || !x->flip) return;
		swap(x->left, x->right);
		if (x->left) x->left->flip = !x->left->flip;
		if (x->right) x->right->flip = !x->right->flip;
		x->flip = false;
	}

	Node* find_max(Node* node) {
		while (node && node->right) {
			node = node->right;
		}
		return node;
	}

	void update(Node* node) {
		if (!node) return;
		node->cnt = 1;
		if (node->left) {
			node->cnt += node->left->cnt;
		}
		if (node->right) {
			node->cnt += node->right->cnt;
		}
	}

	int get_height(Node* node) {
		if (!node) {
			return 0;
		}
		return 1 + max(get_height(node->left), get_height(node->right));
	}

	void print_node(Node* current_node, string indent, bool is_last) {
		if (current_node != nullptr) {
			cout << indent;

			if (is_last) {
				cout << "R----";
				indent += "     ";
			}
			else {
				cout << "L----";
				indent += "|    ";
			}

			cout << current_node->key << endl;

			print_node(current_node->left, indent, false);
			print_node(current_node->right, indent, true);
		}
	}

public:
	Node* root;
	Node* idx[100'001];

	SplayTree() : root(nullptr) {}

	void init() { // dummy node
		root = new Node();
		auto current = root;
		for (int i = 0; i < n; ++i) {
			current->right = new Node(arr[i], current);
			idx[arr[i]] = current->right;
			current = current->right;
		}
		current->right = new Node(-1, current);

		for (int i = n; i >= 1; i--) update(idx[i]);
		splay(idx[n / 2]);
	}

	void insert(int key) { // default
		if (!root) {
			root = new Node(key);
			return;
		}

		Node* current = root;
		Node* parent = nullptr;
		while (current) {
			parent = current;
			if (key < current->key) {
				current = current->left;
			}
			else if (key > current->key) {
				current = current->right;
			}
			else { // 중복되는 경우
				splay(current);
				return;
			}
		}

		Node* new_node = new Node(key);
		new_node->parent = parent;
		if (key < parent->key) {
			parent->left = new_node;
		}
		else {
			parent->right = new_node;
		}
		splay(new_node);
		return;
	}

	Node* find(int key) {
		Node* current = root;
		Node* last = nullptr;

		while (current) {
			push(current);
			last = current;
			if (key < current->key) {
				current = current->left;
			}
			else if (key > current->key) {
				current = current->right;
			}
			else { // 찾은 경우
				splay(current);
				return current;
			}
		}
		if (last) { // 마지막 방문 노드 splay
			splay(last);
		}
		return nullptr;
	}

	void remove(int key) {
		Node* node = find(key);
		if (!node) {
			return;
		}

		Node* left_node = node->left;
		Node* right_node = node->right;

		if (!left_node) {
			root = right_node;
			if (root) {
				root->parent = nullptr;
			}
		}
		else {
			left_node->parent = nullptr;
			Node* max_node = find_max(left_node);
			splay(max_node);
			root = max_node;
			root->right = right_node;
			if (right_node) {
				right_node->parent = root;
			}
		}
	}

	Node* find_kth(int k) { // 1-based
		if (!root || k < 0 || k > root->cnt) {
			return nullptr;
		}
		Node* current = root;
		while (current) {
			push(current);
			int left_size = (current->left) ? current->left->cnt : 0;
			if (k < left_size) { // 왼쪽 서브트리에 있는 경우
				current = current->left;
			}
			else if (k > left_size) { // 오른쪽 서브트리에 있는 경우
				k -= left_size + 1;
				current = current->right;
			}
			else {
				splay(current);
				return current;
			}
		}
		return nullptr;
	}

	Node* gather(int s, int e) {
		Node* en = find_kth(e + 1);
		Node* sn = find_kth(s - 1);
		splay(en, sn);
		return root->right->left;
	}

	void flip(int s, int e) {
		Node* x = gather(s, e);
		x->flip = !x->flip;
	}

	void print_tree() {
		if (root) {
			cout << root->key << endl;
			print_node(root->left, "", false);
			print_node(root->right, "", true);
		}
		else {
			cout << "Tree is empty." << endl;
		}
	}

	void print(Node* node) {
		push(node);
		if (node->left) print(node->left);
		if (node->key > 0) cout << node->key;
		if (node->right) print(node->right);
	}

	void get_idx(int x) {
		splay(idx[x]);
		cout << root->left->cnt << "\n";
	}

};
SplayTree tree;

int main() {
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

	tree.init();

	return 0;
}
